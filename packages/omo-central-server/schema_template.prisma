datasource db {
    provider = "postgresql"
    url = "REPLACE_ME_WITH_THE_CONNECTION_STRING"
}

generator client {
    provider = "prisma-client-js"
}

model Profile {
    // TODO: Is this always the same? Even for different devices?
    // did String
    fissionName String
    fissionRoot String?
    circlesAddress String?
    omoFirstName String?
    omoLastName String?
    omoAvatarCid String?
    omoAvatarMimeType String?

    contacts Contact[] @relation(name: "Contact_AnchorProfile")
    inverseContacts Contact[] @relation(name: "Contact_ContactProfile")

    offers Offer[]

    sentMessages Message[] @relation(name: "Message_Sender")
    receivedMessages Message[] @relation(name: "Message_Recipient")

    // wallets CirclesWallet[]  @relation(name: "CirclesWallet_AddedBy")

    @@unique([fissionName], name:"UX_Profile_fissionName")
    @@unique([fissionRoot], name:"UX_Profile_fissionRoot")
}

model Contact {
    id Int @id @default(autoincrement())
    anchorProfile Profile @relation(name: "Contact_AnchorProfile", fields: [anchorProfileFissionName], references: [fissionName])
    anchorProfileFissionName String
    createdAt DateTime
    createdByType String?
    createdByKey String?
    isMuted Boolean
    displayName String?
    contactProfile Profile @relation(name: "Contact_ContactProfile", fields: [contactProfileFissionName], references: [fissionName])
    contactProfileFissionName String
}

model Offer {
    id Int @id @default(autoincrement())
    createdBy Profile @relation(name: "Offer_CreatedBy", fields: [createdByFissionName], references: [fissionName])
    createdByFissionName String
    publishedAt DateTime
    unlistedAt DateTime?
    purchasedAt DateTime?

    title String
    price String            // price in wei
    description String?
    category String?
    country String?
    city String?
    deliveryTerms String    // pickup, delivery etc.

    pictures File[]
}

enum PurchaseStatus {
      INVALID
      ITEM_LOCKED
      PAYMENT_PROVEN
}

model Purchase {
    id Int @id @default(autoincrement())
    purchasedBy Profile @relation(name: "Purchase_CreatedBy", fields: [purchasedByFissionName], references: [fissionName])
    purchasedByFissionName String
    purchasedAt DateTime
    purchasedProvenAt DateTime?
    purchasedItem Offer @relation(name: "Purchase_PurchasedItem", fields: [purchasedItemId], references: [id])
    purchasedItemId Int
    status PurchaseStatus
}

model File {
    offer Offer  @relation(name: "File_Offer", fields: [offerId], references: [id])
    offerId Int
    size Int?
    mimeType String?
    cid String
    @@unique([offerId, cid], name:"UX_File_Offer")
}

model Message {
    id Int @id @default(autoincrement())
    createdAt DateTime
    readAt DateTime?

    topic String
    type String
    content String

    sender Profile @relation(name: "Message_Sender", fields: [senderFissionName], references: [fissionName])
    senderFissionName String

    recipient Profile @relation(name: "Message_Recipient", fields: [recipientFissionName], references: [fissionName])
    recipientFissionName String
}

// model KeyPair {
//     id Int @id @default(autoincrement())
//     createdAt DateTime
//     createdBy Profile @relation(name: "KeyPair_CreatedBy", fields: [createdByFissionName], references: [fissionName])
//     createdByFissionName String
//
//     type String
//     name String?
//
//     publicKey String
//     privateKey String
// }

// model CirclesWallet {
//     address String @id
//
//     addedAt DateTime
//     addedBy Profile @relation(name: "CirclesWallet_AddedBy", fields: [addedByFissionName], references: [fissionName])
//     addedByFissionName String
//
//     ownToken CirclesToken? @relation(name: "CirclesToken_Owner")
//
//     tokens CirclesToken[]
//     trusts CirclesTrustRelation[] @relation(name: "CirclesTrustRelation_Subject")
//     transfers CirclesTokenTransfer[] @relation(name: "CirclesTokenTransfer_Subject")
// }

//enum CirclesTrustRelationPredicate {
//    GIVING_TO
//    RECEIVING_FROM
//}
//
//model CirclesTrustRelation {
//    id Int @id @default(autoincrement())
//    createdAt DateTime
//    createdInBlockNo Int
//    createdInBlockHash String
//
//    subject CirclesWallet @relation(name: "CirclesTrustRelation_Subject", fields: [subjectAddress], references: [address])
//    subjectAddress String
//
//    predicate CirclesTrustRelationPredicate
//
//    object CirclesWallet @relation(name: "CirclesTrustRelation_Object", fields: [objectAddress], references: [address])
//    objectAddress String
//
//    weight Int // 0-100
//}
//
//model CirclesToken {
//    address String @id
//
//    createdAt DateTime
//    createdInBlockNo Int
//    createdInBlockHash String
//
//    owner CirclesWallet @relation(name: "CirclesToken_Owner", fields: [ownerAddress], references: [address])
//    ownerAddress String
//
//    transfers CirclesTokenTransfer[]
//}
//
//enum CirclesTokenTransferPredicate {
//    GIVING_TO
//    RECEIVING_FROM
//}
//
//model CirclesTokenTransfer {
//    id Int @id @default(autoincrement())
//    createdAt DateTime
//    createdInBlockNo Int
//    createdInBlockHash String
//
//    subject CirclesWallet @relation(name: "CirclesTokenTransfer_Subject", fields: [subjectAddress], references: [address])
//    subjectAddress String
//
//    predicate CirclesTokenTransferPredicate
//
//    object CirclesWallet @relation(name: "CirclesTokenTransfer_Object", fields: [objectAddress], references: [address])
//    objectAddress String
//
//    value String
//}