type Omo {
    # Omo's DID
    did:String!
}

type Profile {
    # The did to which this profile is attached to
    # TODO: Is this always the same, even for different devices?
    #did:String
    # The fission username
    fissionName:ID!
    # The last known fission FS root CID
    fissionRoot:String
    # The address of the connected circles safe
    circlesAddress:String
    # The first name as entered for omosapien
    omoFirstName:String
    # The last name as entered for omosapien
    omoLastName:String
    # The CID of the omo avatar image
    omoAvatarCid:String
    # All market offers of this profile
    offers:[Offer!]
    # All messages that have been sent by this profile
    sentMessages:[Message!]
    # All messages that have been received by this profile
    receivedMessages:[Message!]
}

type Message {
    id: Int!
    createdAt:String!
    readAt:String
    type:String!
    cid:String!

    senderFissionName:ID!
    recipientFissionName:ID!
}
input SendMessageInput {
    toFissionName: String!
    type: String!
    cid: String!
}

type Offer {
    id: Int!
    createdBy: Profile!
    publishedAt: String!
    unpublishedAt: String

    title: String!
    price: String!
    description: String
    category: String
    country: String
    city: String
    deliveryTerms: String!

    pictures: [File!]
}
input CreateOfferInput
{
    title:String!
    price:String!
    deliveryTerms:String!
    description:String
    category:String
    country:String
    city:String
    pictures:[CreateFileInput!]!
}
input QueryOfferInput {
    title:String
    price_lt:String
    price_gt:String
    deliveryTerms:String
    description:String
    category:String
    country:String
    city:String
    publishedAt_lt:String
    publishedAt_gt:String
    unpublishedAt_lt:String
    unpublishedAt_gt:String
}

type File {
    size: Int,
    mimeType: String,
    cid: String!
}
input CreateFileInput
{
    size:Int
    mimeType:String
    cid:String!
}

input QueryUniqueProfileInput
{
    #did: String
    fissionName: String
    fissionRoot:String
}

input QueryProfileInput
{
    #did: String
    fissionName: String
    omoFirstName:String
    omoLastName:String
    circlesAddress:String
}

input UpdateProfileInput
{
    # The last known fission FS root CID or null
    fissionRoot:String
    # The address of the connected circles safe or null
    circlesAddress:String
    # The first name as entered for omosapien or null
    omoFirstName:String
    # The last name as entered for omosapien or null
    omoLastName:String
    # The CID of the omo avatar image or null
    omoAvatarCid:String
}

type Query
{
    omo : Omo
    # Gets the root fs CID for a unique profile
    fissionRoot(query:QueryUniqueProfileInput!) : String!
    # Gets a fully populated profile object
    profile(query:QueryUniqueProfileInput!) : Profile!
    # Queries the directory for profiles that match one or more of the given field values.
    # All fields except "did" and "circlesAddress" are matched with 'startsWith'.
    profiles(query:QueryProfileInput!) : [Profile!]!
    # Gets a fully populated offer object
    offer(offerId:Int!) : Offer!
    # Queries all offers with a wide variety of filter properties
    offers(query:QueryOfferInput!) : [Offer!]!
}

type Mutation
{
    upsertProfile(data:UpdateProfileInput!):Profile!
    createOffer(data:CreateOfferInput!):Offer!
    unpublishOffer(offerId:Int!):Boolean!
    sendMessage(data:SendMessageInput!):Message!
    markMessageAsRead(messageId:Int!):Boolean!
}

type Subscription {
    messages: Message
}
