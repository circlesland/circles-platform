datasource db {
    provider = "postgresql"
    url = "REPLACE_ME_WITH_THE_CONNECTION_STRING"
}

generator client {
    provider = "prisma-client-js"
}

model Profile {
    // TODO: Is this always the same? Even for different devices?
    // did String
    fissionName String
    fissionRoot String?
    circlesAddress String?
    omoFirstName String?
    omoLastName String?
    omoAvatarCid String?
    omoAvatarMimeType String?

    offers Offer[]

    sentMessages Message[] @relation(name: "Message_Sender")
    receivedMessages Message[] @relation(name: "Message_Recipient")

    @@unique([fissionName], name:"UX_Profile_fissionName")
    @@unique([fissionRoot], name:"UX_Profile_fissionRoot")
}

model Offer {
    id Int @id @default(autoincrement())
    createdBy Profile @relation(name: "Offer_CreatedBy", fields: [createdByFissionName], references: [fissionName])
    createdByFissionName String
    publishedAt DateTime
    unpublishedAt DateTime?
    purchasedAt DateTime?

    title String
    price String            // price in wei
    description String?
    category String?
    country String?
    city String?
    deliveryTerms String    // pickup, delivery etc.

    pictures File[]
}

enum PurchaseStatus {
  INVALID
  ITEM_LOCKED
  PAYMENT_PROVEN
}

model Purchase {
    id Int @id @default(autoincrement())
    purchasedBy Profile @relation(name: "Purchase_CreatedBy", fields: [purchasedByFissionName], references: [fissionName])
    purchasedByFissionName String
    purchasedAt DateTime
    purchasedProvenAt DateTime?
    purchasedItem Offer @relation(name: "Purchase_PurchasedItem", fields: [purchasedItemId], references: [id])
    purchasedItemId Int
    status PurchaseStatus
}

model File {
    offer Offer  @relation(name: "File_Offer", fields: [offerId], references: [id])
    offerId Int
    size Int?
    mimeType String?
    cid String
    @@unique([offerId, cid], name:"UX_File_Offer")
}

model Message {
    id Int @id @default(autoincrement())
    createdAt DateTime
    readAt DateTime?

    namespace String
    topic String

    preview String
    cid String

    sender Profile @relation(name: "Message_Sender", fields: [senderFissionName], references: [fissionName])
    senderFissionName String

    recipient Profile @relation(name: "Message_Recipient", fields: [recipientFissionName], references: [fissionName])
    recipientFissionName String
}